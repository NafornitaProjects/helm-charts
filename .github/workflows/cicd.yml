name: Helm Chart Templates CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Validate Helm Charts
        run: |
          for chart in $(find . -name Chart.yaml -exec dirname {} \;); do
            echo "Validating chart in $chart"
            helm lint $chart
            helm template $chart > /dev/null
          done

      - name: Bump Helm Chart Versions
        run: |
          for chart in $(find . -name Chart.yaml -exec dirname {} \;); do
            echo "Bumping version for $chart"

            CURRENT_VERSION=$(grep '^version:' $chart/Chart.yaml | awk '{print $2}')
            
            # Determine the type of version bump
            if git log -1 --pretty=%B | grep -q 'BREAKING CHANGE'; then
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
              echo "Detected BREAKING CHANGE. Bumping to major version $NEW_VERSION."
            elif git log -1 --pretty=%B | grep -q '^feat'; then
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
              echo "Detected feature commit. Bumping to minor version $NEW_VERSION."
            else
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
              echo "Defaulting to patch version bump: $NEW_VERSION."
            fi

            sed -i "s/^version:.*/version: $NEW_VERSION/" $chart/Chart.yaml
            echo "Updated $chart/Chart.yaml to version $NEW_VERSION"

            git add $chart/Chart.yaml
          done

          git commit -m "ci: bump chart versions based on commit messages"

      - name: Package Helm Charts
        run: |
          mkdir -p packaged
          for chart in $(find . -name Chart.yaml -exec dirname {} \;); do
            echo "Packaging chart in $chart"
            helm package $chart --destination packaged/
          done

      - name: Push Updated Charts to Repository
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          git push origin main

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "Helm Charts Release v${{ github.run_number }}"
          draft: false
          prerelease: false
          
      - name: Upload Helm Chart Packages to GitHub Release
        if: github.ref == 'refs/heads/main'
        run: |
            # Extract the raw upload URL
            upload_url="${{ steps.create_release.outputs.upload_url }}"
            echo "Raw upload URL: $upload_url"
        
            # Remove the placeholder from the upload URL
            upload_url_clean=$(echo "$upload_url" | sed 's/{.*}//')
            echo "Cleaned upload URL: $upload_url_clean"
        
            # Loop through packaged files and upload each
            for chart in ./packaged/*.tgz; do
              name=$(basename "$chart")
              echo "Uploading $name to $upload_url_clean"
              curl -X POST \
                -H "Authorization: token ${{ secrets.API_TOKEN }}" \
                -H "Content-Type: application/gzip" \
                --data-binary @"$chart" \
                "$upload_url_clean?name=$name"
            done
        
        